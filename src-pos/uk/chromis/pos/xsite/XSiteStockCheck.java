/*
**    Chromis POS  - The New Face of Open Source POS
**    Copyright (c)2015-2016
**    http://www.chromis.co.uk
**
**    This file is part of Chromis POS Version V0.60.2 beta
**
**    Chromis POS is free software: you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation, either version 3 of the License, or
**    (at your option) any later version.
**
**    Chromis POS is distributed in the hope that it will be useful,
**    but WITHOUT ANY WARRANTY; without even the implied warranty of
**    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**    GNU General Public License for more details.
**
**    You should have received a copy of the GNU General Public License
**    along with Chromis POS.  If not, see <http://www.gnu.org/licenses/>
**
**
 */
package uk.chromis.pos.xsite;

import java.awt.Component;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Window;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import uk.chromis.data.loader.Session;
import uk.chromis.pos.util.DbUtils;

public class XSiteStockCheck extends javax.swing.JDialog {

    private Connection con;
    private ResultSet rs;
    private Statement stmt;
    private String ID;
    private String SQL;
    private Session s;

    private XSiteStockCheck(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
    }

    private XSiteStockCheck(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
    }

    private void init(Session s) {
        this.s = s;
        initComponents();
        setTitle("Cross Site Stock Check");

        // configure the table sizes
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) jStockTable.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(SwingConstants.LEFT);
        jStockTable.getColumnModel().getColumn(0).setPreferredWidth(280);
        jStockTable.getColumnModel().getColumn(1).setPreferredWidth(15);

        //get sites details from database        
        //populate combo box
        jSiteList.removeAll();
        try {
            con = s.getConnection();
            stmt = (Statement) con.createStatement();
            rs = stmt.executeQuery("SELECT * FROM XSITELIST");
            jSiteList.addItem("All Sites");
            while (rs.next()) {
                jSiteList.addItem(rs.getString("NAME"));
            }
        } catch (Exception e) {

        }
    }

    public static XSiteStockCheck getXSite(Component parent, Session s) {
        Window window = SwingUtilities.getWindowAncestor(parent);
        XSiteStockCheck myMsg;
        if (window instanceof Frame) {
            myMsg = new XSiteStockCheck((Frame) window, true);
        } else {
            myMsg = new XSiteStockCheck((Dialog) window, true);
        }
        myMsg.init(s);
        myMsg.applyComponentOrientation(parent.getComponentOrientation());
        return myMsg;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jBarcode = new javax.swing.JTextField();
        jSiteList = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jStockTable = new javax.swing.JTable();
        jBtnCheck = new javax.swing.JButton();
        jBtnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pos_messages"); // NOI18N
        jLabel3.setText(bundle.getString("label.prodbarcode")); // NOI18N

        jBarcode.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jSiteList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText(bundle.getString("label.selectsite")); // NOI18N

        jStockTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jStockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Store", "Units"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jStockTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jStockTable);

        jBtnCheck.setText(bundle.getString("Button.Check")); // NOI18N
        jBtnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCheckActionPerformed(evt);
            }
        });

        jBtnCancel.setText(bundle.getString("Button.Cancel")); // NOI18N
        jBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jBtnCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSiteList, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jSiteList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnCancel)
                    .addComponent(jBtnCheck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCheckActionPerformed
        // TODO add your handling code here:
        Connection siteConnection;
        Statement stmt2;
        ResultSet rs2;
        String barcode = jBarcode.getText();
        Double units;
        //Clear the table if there is any data
        DefaultTableModel model = (DefaultTableModel) jStockTable.getModel();
        int rows = model.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        if (jSiteList.getSelectedItem().equals("All Sites")) {
            try {
                con = s.getConnection();
                stmt = (Statement) con.createStatement();
                rs = stmt.executeQuery("SELECT * FROM XSITELIST");
                while (rs.next()) {
                    siteConnection = DbUtils.getRemoteConnection(rs.getString("SITEUSERNAME"), rs.getString("SITEPASSWORD"), rs.getString("SITEURL"));
                    stmt2 = (Statement) siteConnection.createStatement();
                    rs2 = stmt2.executeQuery("SELECT UNITS FROM STOCKCURRENT WHERE STOCKCURRENT.PRODUCT = (SELECT ID FROM PRODUCTS WHERE PRODUCTS.CODE='" + barcode + "')");
                    while (rs2.next()) {
                        units = rs2.getDouble("UNITS");
                        Object row[] = {rs.getString("NAME"), units.intValue()};
                        model = (DefaultTableModel) jStockTable.getModel();
                        model.addRow(row);
                    }
                }
            } catch (Exception e) {
            }
        } else {
            try {
                con = s.getConnection();
                stmt = (Statement) con.createStatement();
                rs = stmt.executeQuery("SELECT * FROM XSITELIST WHERE NAME='" + jSiteList.getSelectedItem() + "'");
                while (rs.next()) {
                    siteConnection = DbUtils.getRemoteConnection(rs.getString("SITEUSERNAME"), rs.getString("SITEPASSWORD"), rs.getString("SITEURL"));
                    stmt2 = (Statement) siteConnection.createStatement();
                    rs2 = stmt2.executeQuery("SELECT UNITS FROM STOCKCURRENT WHERE STOCKCURRENT.PRODUCT = (SELECT ID FROM PRODUCTS WHERE PRODUCTS.CODE='" + barcode + "')");
                    while (rs2.next()) {
                        Object row[] = {rs.getString("NAME"), rs2.getDouble("UNITS")};
                        model = (DefaultTableModel) jStockTable.getModel();
                        model.addRow(row);
                    }
                }
            } catch (Exception e) {
            }
        }


    }//GEN-LAST:event_jBtnCheckActionPerformed

    private void jBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_jBtnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XSiteStockCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XSiteStockCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XSiteStockCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XSiteStockCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                XSiteStockCheck dialog = new XSiteStockCheck(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jBarcode;
    private javax.swing.JButton jBtnCancel;
    private javax.swing.JButton jBtnCheck;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jSiteList;
    private javax.swing.JTable jStockTable;
    // End of variables declaration//GEN-END:variables
}
