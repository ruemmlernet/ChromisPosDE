/*
**    Chromis POS  - The New Face of Open Source POS
**    Copyright (c)2015-2016
**    http://www.chromis.co.uk
**
**    This file is part of Chromis POS Version V0.60.2 beta
**
**    Chromis POS is free software: you can redistribute it and/or modify
**    it under the terms of the GNU General Public License as published by
**    the Free Software Foundation, either version 3 of the License, or
**    (at your option) any later version.
**
**    Chromis POS is distributed in the hope that it will be useful,
**    but WITHOUT ANY WARRANTY; without even the implied warranty of
**    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**    GNU General Public License for more details.
**
**    You should have received a copy of the GNU General Public License
**    along with Chromis POS.  If not, see <http://www.gnu.org/licenses/>
**
**
*/

package uk.chromis.pos.printer.screen;

import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import javax.swing.JComponent;
import uk.chromis.pos.forms.AppConfig;
import uk.chromis.pos.forms.AppLocal;
import uk.chromis.pos.forms.AppProperties;
import uk.chromis.pos.printer.DevicePrinter;
import uk.chromis.pos.printer.ticket.BasicTicket;
import uk.chromis.pos.printer.ticket.BasicTicketForScreen;

/**
 *
 *
 */
public class DevicePrinterPanel extends javax.swing.JPanel implements DevicePrinter {

    private final String m_sName;
    private final JTicketContainer m_jTicketContainer;
    private BasicTicket m_ticketcurrent;
    private final AppProperties m_props;

    /**
     * Creates new form JPrinterScreen2
     *
     * @param props
     */
    public DevicePrinterPanel(AppProperties props) {
        initComponents();

        m_sName = AppLocal.getIntString("Printer.Screen");
        m_ticketcurrent = null;
        m_jTicketContainer = new JTicketContainer();
        m_jScrollView.setViewportView(m_jTicketContainer);
        m_props = props;
    }

    /**
     *
     * @return
     */
    @Override
    public String getPrinterName() {
        return m_sName;
    }

    /**
     *
     */
    @Override
    public void printLogo(Byte iNumber) {
    }

    /**
     *
     * @return
     */
    @Override
    public String getPrinterDescription() {
        return null;
    }

    /**
     *
     * @return
     */
    @Override
    public JComponent getPrinterComponent() {
        return this;
    }

    /**
     *
     */
    @Override
    public void reset() {
        m_ticketcurrent = null;
        m_jTicketContainer.removeAllTickets();
        m_jTicketContainer.repaint();
    }

    // INTERFAZ PRINTER 2
    /**
     *
     */
    @Override
    public void beginReceipt() {
        m_ticketcurrent = new BasicTicketForScreen();

    }

    /**
     *
     * @param image
     */
    @Override
    public void printImage(BufferedImage image) {
        m_ticketcurrent.printImage(image);
    }

    /**
     *
     * @param type
     * @param position
     * @param code
     */
    @Override
    public Boolean printBarCode(String type, String position, String code) {
        m_ticketcurrent.printBarCode(type, position, code);
        return true;
    }

    /**
     *
     * @param iTextSize
     */
    @Override
    public void beginLine(int iTextSize) {
        m_ticketcurrent.beginLine(iTextSize);
    }

    /**
     *
     * @param iStyle
     * @param sText
     */
    @Override
    public void printText(int iStyle, String sText) {
        m_ticketcurrent.printText(iStyle, sText);
    }

    /**
     *
     */
    @Override
    public void endLine() {
        m_ticketcurrent.endLine();
    }

    /**
     *
     */
    @Override
    public void endReceipt() {
        m_jTicketContainer.addTicket(new JTicket(m_ticketcurrent, Integer.parseInt(AppConfig.getInstance().getProperty("screen.receipt.columns"))));
        m_ticketcurrent = null;
    }

    /**
     *
     */
    @Override
    public void openDrawer() {
        // Una simulacion
        Toolkit.getDefaultToolkit().beep();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        m_jScrollView = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        m_jScrollView.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        add(m_jScrollView, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane m_jScrollView;
    // End of variables declaration//GEN-END:variables

}
